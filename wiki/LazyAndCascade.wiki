#summary lazy和cascade属性

= lazy属性 =
@Property、@Embed、@EmbedList都有lazy属性，其缺省值都是false。

如果把lazy设为true，那么表示：当取出一个List的时候，不会把lazy=true的属性取出来。

如果是取单条记录，会把这条记录的所有field都取出来，不管该field是否为lazy。也就是说，lazy属性只对取列表的时候起作用。

设置lazy属性的好处是，能够节省内存，而且取数据的速度会更快一些。

以一个简单的新闻系统为例：
{{{
@Entity
public class News implements BuguEntity{
    @Id
    private String id;
    private String title;  //新闻标题
    @Property(lazy=true)
    private String content;  //新闻内容

    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    ...getter and setter...
    
}

public class NewsDao extends BuguDao{
    public NewsDao(){
        super(News.class);
    }
}
}}}
新闻的内容，是很长的字符串。而显示新闻列表的时候，并不需要把新闻内容取出来。
{{{
NewsDao dao = new NewsDao();
List<News> list = dao.query().pageNumber(1).pageSize(100).results();  //取出100条新闻
}}}
因为content上的@Property注解，把lazy设为了true，因此，并没有把content字段从数据库中取出来，list里面每个News的content，值为null。

=== fetchLazy() ===
在某些特殊的应用场合，对于设置了lazy=true的属性，仍然希望它能够在列表中显示。这时候，可以使用辅助工具类BuguMapper中的fetchLazy()方法：
{{{
NewsDao dao = new NewsDao();
List<News> list = dao.query().pageNumber(1).pageSize(100).results();  //News中不包含lazy=true的字段
BuguMapper.fetchLazy(list);  //现在，lazy=true的字段也被取出来了
}}}
fetchLazy()方法虽然用起来很方便，但它是以牺牲性能为代价的，因此，除非特殊情况，否则不要使用它。

= cascade属性 =
对于@Ref、@RefList注解的属性，默认lazy=true，只取出其值的id，而不取出其它属性值。当你要用到其它属性值的时候，可以使用BuguMapper的fetch方法，将@Ref、@RefList的属性值全部取出。例子如下：
{{{
...
Foo foo = fooDao.findOne(id);
BuguMapper.fetch(foo, "children");    //把foo的children属性取出来
...
List list = fooDao.findAll();
BuguMapper.fetch(list, "father");
}}}
fetch()方法还支持级联取出属性，可以一级一级往下取，例如：
{{{
BuguMapper.fetch(list, "father.father");
}}}
当用fetch()方法取出@RefList注解标注的属性时，会根据注解上的sort属性进行排序。