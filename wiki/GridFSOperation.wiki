#summary GridFS文件操作

=GridFS文件操作=

通过BuguFS类，能够实现对GridFS文件的保存、获取、删除操作。

代码例子如下：
{{{
import com.bugull.mongo.fs.BuguFS;

BuguFS fs = BuguFS.getInstance();

//保存
File file = ...
fs.save(file);   //filename使用file.getName()

String filename = ...  //提供一个文件名(重命名)
fs.save(file, filename);

Byte[] data = ...
String filename = ...
fs.save(data, filename);

Map params = new HashMap();
params.put("author", "张三");
params.put("group", "技术");
fs.save(data, filename, params);

//获取
GridFSDBFile dbFile = fs.findOne(filename);
InputStream is = dbFile.getInputStream();

DBObject query = ...
List<GridFSDBFile> list = fs.find(query);

//删除
fs.remove(filename);
fs.remove(query);
}}}

BuguFS类比较低级。幸运的是，你可以不必直接使用BuguFS类。BuguMongo在BuguFS类的基础之上，提供了另外4个类，来简化GridFS文件的上传和获取，而且功能更加强大。这4个类分别是：

上传：Uploader、ImageUploader、Watermark。

读取：UploadedFileServlet

==文件上传==
这里，以Struts2开发的新闻系统为例。当然，这仅仅是个例子，并不是说BuguMongo只能在Struts2中使用。

发布一篇新闻的时候，同时上传新闻的附件（比如.doc文件），那么，在Struts2的Action中，代码这样写：
{{{
import com.bugull.mongo.fs.Uploader;
...
public class CreateNewsAction extends ActionSupport{

    private File file;
    private String fileFileName;
    private News news;
    private NewsDao newsDao;

    public String execute(){
        Uploader uploader = new Uploader(file, fileFileName);
        uploader.save();
        news.setAttachment(uploader.getFilename());
        newsDao.save(news);
        return SUCCESS;
    }
    ...
}
}}}
uploader.getFilename()，返回的是，文件经过保存以后，系统生成的文件名（含扩展名），格式如：2011070799999999999999.doc，其中，20110707为日期，9999999999999为当前时间的long值。news实体中attachment值，就是这个字符串。

还可以为上传的文件设置其它属性。例如，设置文件的作者：
{{{
Uploader uploader = new Uploader(file, fileFileName);
uploader.setAttribute("author", "Frank");
uploader.save();
}}}

==图片文件的上传==
图片上传使用类ImageUploader，它继承自Uploader，除了具备上面讲的Uploader的功能以外，ImageUploader还能实现图片加水印、图片压缩。

===图片加水印===
图片上传的时候，可以自动加上水印，代码如下：
{{{
import com.bugull.mongo.fs.Watermark;
import com.bugull.mongo.fs.ImageUploader;
...
public class CreateProductAction extends ActionSupport{

    private File img;
    private String imgFileName;
    private Product product;
    private ProductDao productDao;

    public String execute(){
        Watermark watermark = new Watermark();
        watermark.setFilePath("/root/website/images/watermark.png");
        watermark.setAlign(Watermark.CENTER);
        ImageUploader uploader = new ImageUploader(img, imgFileName);
        uploader.save(watermark);
        product.setPicture(uploader.getFilename());
        productDao.save(product);
        return SUCCESS;
    }
    ...
}
}}}
watermark.setFilePath(filePath)设置水印文件的路径，该路径是操作系统的绝对路径。

watermark.setAlign(align)设置水印图片的对其位置，Watermark.CENTER表示水印位于图片正中央，Watermark.BOTTOM_RIGHT表示水印位于图片的右下角。

如果是位于右下角，则还可以用watermark.setBottom(int bottom)，watermark.setRight(int right)来设置水印图片和原图片之间的下边距、右边距。

为保证水印效果，水印图片最好是.png格式的，背景是透明的，图片内容是半透明的。

===图片压缩===
图片上传的时候，经常还需要将该图片压缩、保存成若干份，代码例子如下：
{{{
import com.bugull.mongo.fs.ImageUploader;
...
public class CreateProductAction extends ActionSupport{

    private File img;
    private String imgFileName;
    private Product product;
    private ProductDao productDao;

    public String execute(){
        ImageUploader uploader = new ImageUploader(img, imgFileName);
        uploader.save();
        uploader.compress("medium", 300, 300);
        uploader.compress("small", 100, 100);
        product.setPicture(uploader.getFilename());
        productDao.save(product);
        return SUCCESS;
    }
    ...
}
}}}
public void compress(String dimension, int maxWidth, int maxHeight) 方法中，dimension是指图片尺寸的类型，用来区分同一图片的不同尺寸的拷贝。经过compress方法压缩保存后的图片文件，和原图有相同的filename，例如，同样是2011070799999999999999.jpg。

===文件的获取===
如果你是在Web项目中使用BuguMongo，那么，保存到GridFS中的文件，可以通过UploadedFileServlet来获取，在web.xml中配置如下：
{{{
<servlet>
    <servlet-name>UploadedFile</servlet-name>
    <servlet-class>com.bugull.mongo.fs.UploadedFileServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>UploadedFile</servlet-name>
    <url-pattern>/UploadedFile/*</url-pattern>
</servlet-mapping>
}}}
然后，可以通过如下的URL链接来获取文件：
{{{
http://www.domain.com/UploadedFile/xxxx.jpg
或者：
http://www.domain.com/UploadedFile/key/value/xxxx.jpg
http://www.domain.com/UploadedFile/key1/value1/key2/value2/xxxx.jpg
}}}
其中：

xxxx.jpg——表示文件名，必须提供。

key、value——表示属性名称、属性值。

例如：
{{{
http://www.domain.com/UploadedFile/dimension/small/2011070799999999999999.jpg
http://www.domain.com/UploadedFile/author/Frank/dimension/small/2011070799999999999999.jpg
}}}
*需要特别注意*的是，经过ImageUploader.compress()压缩后的图片，默认有一个尺寸属性，属性名称是"dimension"，属性值就是compress()函数中的参数值。

对于图片类型的文件，通过该Servlet获取，浏览器能对它进行缓存。

对于非图片类型的文件，返回application/octet-stream格式的内容，浏览器不对它进行缓存。