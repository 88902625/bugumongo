#summary Query查询

=Query查询=
在用BuguMongo做开发的时候，除了使用[http://code.google.com/p/bugumongo/wiki/ObjectDocumentMapping#2、使用_进行操作 BuguDao]中的find方法进行查询外，还有另一种选择，就是使用Query类。

==1、Query==

先看看Query类中有些什么方法：

*生成查询条件*：
{{{
public Query is(String key, Object value)

public Query notEquals(String key, Object value)

public Query greaterThan(String key, Object value)

public Query greaterThanEquals(String key, Object value)

public Query lessThan(String key, Object value)

public Query lessThanEquals(String key, Object value)

public Query in(String key, Object... values)

public Query notIn(String key, Object... values)

public Query all(String key, Object... values)

public Query size(String key, int value)

public Query mod(String key, int divisor, int remainder)

public Query exists(String key)

public Query notExists(String key)

public Query regex(String key, String regex)

public Query or(Query... qs)

public Query and(Query... qs)

public Query near(String key, double x, double y)

public Query near(String key, double x, double y, double maxDistance)

public Query withinCenter(String key, double x, double y, double radius)

public Query withinBox(String key, double x1, double y1, double x2, double y2)
}}}
*设置查询参数*:
{{{
public Query sort(String orderBy)

public Query pageNumber(int pageNumber)

public Query pageSize(int pageSize)
}}}
*返回查询结果*：
{{{
public Object result()  //返回一个实体

public List results()  //返回多个实体

public long count()
}}}

==2、创建Query==
通过调用BuguDao中的query()方法，就可以创建一个Query对象：
{{{
public class FooDao extends BuguDao{
    public FooDao(){
        super(Foo.class);
    }
    ...
}

FooDao dao = new FooDao();
Query q = dao.query();
...
}}}

==3、用Query实现查询==
===3.1、支持连缀书写形式===
{{{
List list = dao.query().greaterThan("level", 10).notEquals("name", "Frank").pageNumber(1).pageSize(20).results();
}}}
===3.2、支持字符串形式的排序===
{{{
List list = dao.query().in("name", "Frank", "John").sort("level:1, timestamp: -1");
}}}
对于排序字符串的书写规则，请[http://code.google.com/p/bugumongo/wiki/ObjectDocumentMapping#2.3、排序 参考这里]。
===3.3、支持Entity实体查询===
不需要像BuguDao中的find方法那样，把Entity转换成DBRef，而是直接使用Entity进行查询。
{{{
FatherDao fDao = new FatherDao();
FatherFoo father = (FatherFoo)fDao.query().is("id", "4dcb4d1d3febc6503e4e5933").result();

Foo foo = (Foo)dao.query().is("father", father).result();
}}}
===3.4、支持多个条件的and、or布尔组合查询===
{{{
Query q1 = dao.query().greaterThan("level", 10);
Query q2 = dao.query().is("name", "John");
List list = dao.query().or(q1, q2).results();
}}}
*注意*：and操作只有MongoDB 2.0以后才支持，而且，几乎很少需要用到and操作，Query的连缀书写形式，就是按多个条件的“and”关系进行组合的。一个需要用到and操作的例子如下，它用来连接两个or条件：
{{{
Query q1 = dao.query().is("level", 10);
Query q2 = dao.query().is("level", 20);
Query or1 = dao.query().or(q1, q2);
Query q3 = dao.query().is("name", "Frank");
Query q4 = dao.query().is("name", "John");
Query or2 = dao.query().or(q3, q4);
List list = dao.query().and(or1, or2).results();
}}}
==4、用Query类还是用find方法？==
BuguDao中的find方法，Query类，都可以用来实现查询，至于在开发过程中使用哪一种方式，可以根据个人的喜好而定，也可以根据功能需求混合使用，如下：
{{{
FatherDao fDao = new FatherDao();
FatherFoo father = (FatherFoo)fDao.findOne("4dcb4d1d3febc6503e4e5933");

Foo foo = (Foo)dao.query().is("father", father).result();
}}}