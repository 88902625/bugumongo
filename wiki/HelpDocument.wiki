#summary 使用说明、帮助文档
#labels 使用说明,帮助文档,Wiki

=使用前提=

1、需要JDK1.6以上

2、需要MongoDB Java Driver

3、需要log4j

4、需要Lucene 3.2

=1、对象-数据库映射=
在对象-数据库映射方面，BuguMongo提供了：

8个注解：@Entity、@Id、@Property、@Embed、@EmbedList、@Ref、@RefList、@Ignore

3个类：BuguConnection、BuguDao、BuguMapper

1个接口：BuguEntity

它们的含义都很直观。BuguMongo的使用，就是围绕着上述注解、类和接口来进行。

==步骤一：定义Entity==
要使得某个Java Entity能和MongoDB Document实现相互转换，该Entity需要实现BuguEntity接口，并加上注解，如下：
{{{
import com.bugull.mongo.BuguEntity;
import com.bugull.mongo.annotations.Entity;
import com.bugull.mongo.annotations.Id;
import com.bugull.mongo.annotations.Property;
import com.bugull.mongo.annotations.Embed;
import com.bugull.mongo.annotations.EmbedList;
import com.bugull.mongo.annotations.Ref;
import com.bugull.mongo.annotations.RefList;
import java.util.List;

@Entity(name="foo")
public class Foo implements BuguEntity{
    @Id
    private String id;
    @Property
    private int level;
    @Embed
    private EmbedFoo embed;
    @EmbedList
    private List<EmbedFoo> embedList;
    @Ref
    private FatherFoo father;
    @RefList
    private List<ChildFoo> children;
    @Ignore
    private double sumScore;
    ...getter and setter...
}

public class EmbedFoo {
    private float x;
    private int y;
    ...getter and setter
}

@Entity(name="father")
public class FatherFoo implements BuguEntity{
    @Id
    private String id;
    private Date date;
    ...getter and setter...
}

@Entity(name="child")
public class ChildFoo implements BuguEntity{
    @Id
    private String id;
    private List<String> list;
    ...getter and setter...
}
}}}
各个注解的含义如下：
===@Entity===
表示需要映射到MongoDB中的一个实体，参数name表示其在MongoDB中的collection的名称。参数name可以省略，默认使用类名的小写。

*提示：*使用@Entity注解的类，必须实现BuguEntity接口。
===@Id===
映射到MongoDB中的"_id"，必须为String类型。
===@Property===
该注解可以省略。它用来映射基本数据类型，包括：String、int、long、float、double、boolean、char、Date等，以及这些基本数据类型组成的数组、List、Set。

@Property有一个参数name，用于指定映射到MongoDB collection中某个field。参数name可以省略，表示采用与Entity的Field相同的名称。
===@Embed===
表示该属性是一个嵌入的对象。其参数name的含义与@Property中的相同。
===@EmbedList===
表示该属性是一组嵌入的对象。其参数name的含义与@Property中的相同。

*提示：*用@EmbedList注解的List，必须使用泛型。
===@Ref===
表示对另一个对象的引用，在MongoDB中保存的是形如"father" : {"$ref" : "father", "$id" : ObjectId("4dcb4d1d3febc6503e4e5933")}这样的一个DBRef。

@Ref有一个参数name，含义与@Property的参数name一样。

@Ref还有一个参数lazy，值为true或false，默认为true。用于指定是否关联取出该引用对象。若lazy=true，表示只取出该引用对象的id，而不取出其它属性。若lazy=false，表示同时取出该引用对象的所有属性。
===@RefList===
表示对另一个对象的引用的集合。其参数name和lazy的含义与@Ref中的类似。

*提示：*用@RefList注解的List，需要使用泛型。
===@Ignore===
表示该属性不需要被映射。当保存实体时，该属性不会保存至MongoDB；同样，该属性也不会从MongoDB中取出。

==步骤二：连接数据库==
在能够对MongDB进行操作之前，需要使用BuguConnection连接MongoDB数据库。如：
{{{
BuguConnection conn = BuguConnection.getInstance();
conn.setHost("192.168.0.100");
conn.setPort(27017);
conn.setDatabase("mydb");
conn.setUsername("username");
conn.setPassword("password");
conn.connect();
}}}
或者：
{{{
BuguConnection conn = BuguConnection.getInstance();
conn.connect("192.168.0.100", 27017, "mydb", "username", "password");
}}}

==步骤三：使用BuguDao进行数据库操作==
你需要编写自己的Dao，如FooDao，来操作Foo相关的数据，FooDao需要继承自BuguDao，并且，在FooDao的构造函数中，需要传递Foo.class，如下：
{{{
public class FooDao extends BuguDao{
    public FooDao(){
        super(Foo.class);
    }
}
}}}
BuguDao中，提供了大量的方法，用于操作MongoDB的Collection，包括：

insert()

save()

remove()

update()

set()

inc()

push()

pull()

exists()

findOne()

findAll()

find()

count()

distinct()

mapReduce()

*提示：*值得特别指出的是，findAll()、find()等方法，在排序方面，除了支持标准的DBObject外，还支持使用形如"level:1"、"createTime:-1"这样的字符串进行单一条件排序。这能为你编写程序带来方便。

你自己编写的Dao，通过继承自BuguDao，可以直接调用这些方法，也可以通过组合这些方法，实现更复杂的函数。如：
{{{
public class FooDao extends BuguDao{
    public FooDao(){
        super(Foo.class);
    }
    public long coutByLowLevel(int level){
        DBObject query = QueryBuilder.start("level").greaterThan(level).get();
        return this.count(query);
    }
    ...other functions...
}
}}}
{{{
Foo foo = ...
FooDao fDao = new FooDao();
fDao.save(foo);
int count = fDao.countByLowLevel(9);
fDao.remove(foo);
}}}

==辅助转换工具：BuguMapper==
在某些地方，你需要使用BuguMapper来进行数据转换。BuguMapper提供了3个方法：

fromDBObject()

toDBObject()

toDBRef()

一个例子如下：
{{{
public class FooDao extends BuguDao{
    ...
    public Foo getByFather(FatherFoo father){
        DBObject query = new BasicDBObject();
        query.put("father", new BuguMapper().toDBRef(father));
        return (Foo)this.findOne(query);
    }
    ...
}
}}}
另外，对于@Ref、@RefList注解的属性，默认lazy=true，只取出其值的id，而不取出其它属性值。当你要用到其它属性值的时候，可以使用BuguMapper的fetch方法，例子如下：
{{{
...
Foo foo = fooDao.findOne(id);
BuguMapper mapper = new BuguMapper();
mapper.fetch(foo, "children");
...
List list = fooDao.findAll();
mapper.fetch(list, "father");
}}}

=2、Lucene索引=
在Lucene索引方面，BuguMongo提供了：

5个注解：@Indexed、@IndexProperty、@IndexEmbed、@IndexRef、@IndexFilter

3个类：BuguIndex、BuguParser、BuguSearcher

==步骤一：在Entity上加注解==
代码例子如下：
{{{
import com.bugull.mongo.BuguEntity;
import com.bugull.mongo.annotations.Entity;
import com.bugull.mongo.annotations.Embed;
import com.bugull.mongo.annotations.Id;
import com.bugull.mongo.annotations.Ref;
import com.bugull.mongo.lucene.annotations.Indexed;
import com.bugull.mongo.lucene.annotations.IndexProperty;
import com.bugull.mongo.lucene.annotations.IndexEmbed;
import com.bugull.mongo.lucene.annotations.IndexRef;
import com.bugull.mongo.lucene.annotations.IndexFilter;
import com.bugull.mongo.lucene.annotations.Compare;
import java.util.List;

@Entity(name="foo")
@Indexed
public class Foo implements BuguEntity{
    @Id
    private String id;
    @IndexProperty(analyze=true)
    private String introduce;
    @Embed
    @IndexEmbed
    private EmbedFoo embed;
    @Ref
    @IndexRef
    private FatherFoo father;
    @IndexFilter(compare=Compare.IS_EQUALS,value="true")
    private boolean valid;
    ...getter and setter...
}

public class EmbedFoo {
    @IndexProperty
    private float x;
    @IndexProperty
    private int y;
    ...getter and setter
}

@Entity(name="father")
public class FatherFoo implements BuguEntity{
    @Id
    private String id;
    @IndexProperty(analyze=true)
    private String name;
    ...getter and setter...
}
}}}
各个注解的含义如下：

===@Indexed===
表示需要对该Entity建索引。该Entity上必须要有@Entity和@Id注解，@Indexed才能起作用。
===@IndexProperty===
表示需要索引的属性。该注解有2个参数：analyze和store，都是boolean型，analyze表示是否需要分词，store表示是否需要存储，默认值都是false。

@IndexProperty支持的数据类型包括：String、char、boolean、int、long、float、double、Date等基本数据类型。其中，数值、日期类型可以用于范围查询和排序。

@IndexProperty还支持上述基本数据类型组成的数组、List、Set等。这些集合中的元素，不管是什么数据类型，都会连结成一个字符串，然后加以索引。可以用@IndexProperty的join参数设置连接字符。默认是用分号";"进行字符串连结。
===@IndexEmbed===
表示需要嵌入对该Embed属性的索引。
===@IndexRef===
表示需要嵌入对该Ref属性的索引。

*提示：*BuguMongo不支持@EmbedList、@RefList类型属性的索引。
===@IndexFilter===
表示只有满足该条件的实体才会被索引，否则不创建索引。在一个实体上可以有多个@IndexFilter。

@IndexFilter有2个参数：compare和value。compare表示比较操作，是枚举类型Compare。value是比较的值，是字符串，会相应的解析成该属性类型的值。

compare有多个枚举值，它们的含义和所支持的数据类型如下：

Compare.IS_EQUALS——等于（==）。支持String、boolean、int、long、float、double、char。

Compare.NOT_EQUALS——不等于（!=）。支持String、boolean、int、long、float、double、char。

Compare.GREATER_THAN——大于（>）。支持int、long、float、double。

Compare.GREATER_THAN_EQUALS——大于等于（>=）。支持int、long、float、double。

Compare.LESS_THAN——小于（<）。支持int、long、float、double。

Compare.LESS_THAN_EQUALS——小于等于（<=）。支持int、long、float、double。

Compare.IS_NULL——为空（==null）。支持Object类型，包括String。这时不需要value参数。

Compare.NOT_NULL——不为空（!=null）。支持Object类型，包括String。这时不需要value参数。

==步骤二：设置索引参数==
代码例子如下：
{{{
BuguIndex index = BuguIndex.getInstance();
index.setAnalyzer(new StandardAnalyzer(index.getVersion()));
index.setDirectoryType(DirectoryFactory.TYPE_FS);
index.setDirectoryPath("/root/lucene_index/");
index.startIndexReopenTask(30L*1000L);
}}}
代码中各个函数的含义都很直观。其中：

startIndexReopenTask(long milli)的参数以毫秒为单位，表示索引刷新的时间周期，该参数值根据应用的情况而定，如30秒：30L*1000L。

另外，如果你不想使用默认的Lucene版本，还可以用setVersion()来设置Lucene索引的版本。

==步骤三：搜索==
通过上面的设置，BuguMongo能够实现Entity和Lucene索引之间的自动同步，你只要实现搜索就行了。最基本的搜索的例子如下：
{{{
BuguParser parser = new BuguParser();
Query query = parser.parse("introduce", "谷歌");
BuguSearcher searcher = new BuguSearcher(Foo.class);
searcher.setQuery(query);
searcher.setSort(...);
searcher.setPageNumber(1);
searcher.setPageSize(20);
searcher.setMaxPage(50);
List list = searcher.search();
int count = searcher.getResultCount();
for(Object obj : list){
    Foo foo = (Foo)obj;
    ...
}
}}}
setMaxPage(maxPage)，表示最多返回搜索结果的前maxPage页。设置该参数的原因是：如果返回所有的搜索结果，当数据量太大的时候，会导致性能问题。

pageNumber、pageSize、maxPage的值都可以不设置，默认值为分别为：1、20、50。

如果不排序，可以不用setSort()。

BuguParser类提供了对各种数据类型的查询支持，包括数值查询、数值和日期查询等，还提供了MultiFieldQueryParser的功能，参见下面的例子。

对于通过@IndexEmbed和@IndexRef嵌入的索引，索引的field名称需要加上该属性的名称作为前缀，如：father.name。参见下面的例子。

{{{
BuguParser parser = new BuguParser();
Query strQuery = parser.parse(new String[]{"introduce","father.name"},"谷歌");
Query xQuery = parser.parse("embed.x",3.14f);
Query yQuery = parser.parse("embed.y", 100, 300);
BooleanQuery bQuery = new BooleanQuery();
bQuery.add(strQuery, Occur.SHOULD);
bQuery.add(xQuery, Occur.MUST_NOT);
bQuery.add(yQuery, Occur.MUST);
BuguSearcher searcher = new BuguSearcher(Foo.class);
searcher.setQuery(bQuery);
List list = searcher.search();
int count = searcher.getResultCount();
for(Object obj : list){
    Foo foo = (Foo)obj;
    ...
}
}}}

==辅助工具：重建索引==
在某些情况下，由于特殊的原因，Lucene索引文件没有与MongoDB中的记录一一对应，这时，需要对MongoDB中的记录重新建立Lucene索引。BuguMongo提供了一个类IndexRebuilder来实现该功能。IndexRebuilder实现了Runnable接口，可以利用它生成多个线程。代码例子如下：
{{{
IndexRebuilder t1 = new IndexRebuilder(Foo.class);
new Thread(t1).start();
...
IndexRebuilder t2 = new IndexRebuilder(MyEntity.class);
new Thread(t2).start();
}}}